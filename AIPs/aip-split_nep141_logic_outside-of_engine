---
aip: 3
title: Split NEP-141 logic outside of Engine
description: Split NEP-141 logic outside of Engine as separate independent smart contract.
author: Evgeny Ukhanov (@mrLSD)
discussions-to: https://forum.aurora.dev/t/split-nep-141-logic-outside-of-engine/368
status: Draft
type: Standards Track
category: Aurora-Engine
created: 2022-07-14
---

## Abstract

At the moment, the NEP-141 logic is one of the main parts of the Aurora 
contract. NEP-141 - implements the fungible token logic, which is the 
link between the Ethereum and NEAR ecosystem tokens.

Due to the specifics of the original goals of the Aurora contract, 
the logic of NEP-141 has become an integral part of the core contract itself.

However, further use and development of Aurora showed that this solution 
has a number of shortcomings, which are proposed to be solved in this 
proposal.

In the most general form, these include:

* improved security (due to a number of vulnerabilities found recently)

* more flexible changes (this will not require updating the entire aurora contract)

The result of the split should be a separate contract that the Aurora 
contract interacts with through cross-contract calls.

## Motivation

One of the features of NEAR contracts is the interaction between 
contracts. Due to this approach, it is possible to create an entire 
ecosystem in which many users and developers are involved.

Putting the logic of NEP-141 into a separate contract solves important 
tasks, the cornerstone of which is the interaction between contracts:

* a separate code base, and as a result, the development of the contract, 
independent of the development of the Aurora contract

* flexible contract deployment. Changes to the new contract will not 
affect the Aurora contract. And this excludes the generation of new 
errors, due to the immutability of the Aurora contract.

* quick and precise response and corrections in case of errors or other 
emergency situations

We especially note that isolating the functionality and placing it in a 
separate contract, including through isolating the code base, the 
process of developing and deploying the contract, solves an important 
security problem: faster detection and quick response to 
security-related issues. And this is not only about flexibility, but 
also about reliability and stability. This increases the business value 
of the NEP-141 logic extraction solution itself as a separate entity.

It is **worth noting** that the new contract with the NEP-141 logic is 
available for interaction only with the Aurora contract. This means 
that no user or third party contract can access it. At the same time, 
the end user and third-party contracts will not notice any changes when 
interacting with the Aurora contract. In a practical sense, this means 
that no edits or changes need to be made to the interaction with the 
Aurora contract. The interaction interface remains the same.

## Specification

## Rationale

The main design goal is to simplify the logic of the NEP-141, compared 
to the complicated representation in the current Aurora contract. 
This should reduce the cognitive load when getting acquainted with 
the code base and the ability to quickly and efficiently maintain 
the contract code with a wide range of stakeholders.

## Backwards Compatibility

When splitting the contract and transferring the NEP-141 logic to a 
separate contract, full backward compatibility is ensured.

This implies that the end user retains the Interface (API) when 
interacting with the Aurora contract. This means that the end user 
will not notice any changes and is not required to make any edits or 
changes to interact with the Aurora contract.

## Test Cases

The current unit tests for the NEP-141 logic will be transferred to 
the new contract. They will also be revised and reworked under the 
terms of an independent contract.

An important feature is that all Aurora tests should still work 
successfully, since the front end for users and contracts remains 
the same.

## Reference Implementation

The NEAR template will be used as a reference implementation
for NEP-141. 
TODO: Link to template

It is important to note that the current implementation of Aurora uses 
a no-std implementation. The use of an existing template implies the 
use of `std` as well as `near-sdk`.

## Security Considerations

## Copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).
